#include <iostream>
#include <Windows.h>
#include <ctime>

static int g_nScreenIndex;
static HANDLE g_hScreen[2];
int g_numofFPS;
clock_t CurTime, OldTime;
char* FPSTextInfo;

void ScreenInit() {
	CONSOLE_CURSOR_INFO cci;

	g_hScreen[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	g_hScreen[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

	cci.dwSize = 1;
	cci.bVisible = FALSE;
	SetConsoleCursorInfo(g_hScreen[0], &cci);
	SetConsoleCursorInfo(g_hScreen[1], &cci);
}

void ScreenFlipping()
{
	SetConsoleActiveScreenBuffer(g_hScreen[g_nScreenIndex]);
	g_nScreenIndex = !g_nScreenIndex;
}

void ScreenClear()
{
	COORD Coor = { 0, 0 };
	DWORD dw;
	FillConsoleOutputCharacter(g_hScreen[g_nScreenIndex], ' ', 80 * 25, Coor, &dw);
}

void ScreenRelease()
{
	CloseHandle(g_hScreen[0]);
	CloseHandle(g_hScreen[1]);
}

void ScreenPrint(int x, int y, char* string)
{
	DWORD dw;
	COORD CursorPosition = { x, y };
	SetConsoleCursorPosition(g_hScreen[g_nScreenIndex], CursorPosition);
	WriteFile(g_hScreen[g_nScreenIndex], string, strlen(string), &dw, NULL);
}

void Render() {
	ScreenClear();

	if (CurTime - OldTime >= 1000)
	{
		sprintf_s(FPSTextInfo, 200, "FPS : %d", g_numofFPS);
		OldTime = CurTime;
		g_numofFPS = 0;
	}

	g_numofFPS++;
	ScreenPrint(0, 0, FPSTextInfo);
	ScreenFlipping();
}

void Release()
{
	delete[] FPSTextInfo;
}


void gotoxy(int x, int y) {
	COORD Pos = { x - 1, y - 1 };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}
int main() {

	g_numofFPS = 0;
	FPSTextInfo = new char[128];
	memset(FPSTextInfo, '\0', 128);

	ScreenInit();

	OldTime = clock();

	while (1)
	{
		CurTime = clock();
		Render();
	}

	Release();
	ScreenRelease();

	/*int x = 1;
	int y = 1;
	gotoxy(x, y);
	while (1) {
		if (GetAsyncKeyState(VK_LEFT) & 0x8000) {
			x--;
		}
		if (GetAsyncKeyState(VK_RIGHT) & 0x8000) {
			x++;
		}
		if (GetAsyncKeyState(VK_UP) & 0x8000) {
			y--;
		}
		if (GetAsyncKeyState(VK_DOWN) & 0x8000) {
			y++;
		}
		system("cls");
		gotoxy(x, y);
		std::cout << "a";
	}*/
}